<?php
/**
 * 如果系统规模较小，可以让命令自己调用视图，但这不是最佳的选择，最好的是尽量让命令和视图分离
 * 应用控制器负责映射请求到命令，并映射命令到视图
 * 这种分离意味着可以更容易的改变视图，而不用改动核心代码
 * 可以改变应用程序的流程而不用修改核心代码
 * 把Command 分离出来，可以更容易把同一个Command 用在系统中的不同地方
 *
 * 又回到了：把功能分离出来，无论面向过程。面向对象本质都是一样的，减少耦合
 *
 * 问题：
 * 管理员需要增加一个场所（venue）到系统中,并将场所关联到一个空间（space）
 * 所有系统需要支持AddVenue AddSpace 命令
 *
 * 可以直接使用请求参数 如（cmd=AddVenue）将命令映射到一个类（AddVenue）
 * 一般的：AddVenue 命令执行成功， AddSpace 命令将被调用；这种关系可以被硬编码到代码中
 * AddVenue 命令 调用AddSpace ，AddSpace 加载一个视图
 * 以上两个命令至少与两个视图相关联，可以在Command 命令中包含这些视图；用条件语句来判断使用哪个视图
 *
 * 在系统规模较小的时候，将视图硬编码进命令类中是可行的，
 * 但当系统不断发展，命令类不断增多，这种处理方式就存在问题了
 * 如果每一个命令只使用一次，衣柜命令只与其他命令和一个视图有关系，那么就应该将命令间的关系和命令与视图的关系硬编码到每个命令类中
 *
 * 用应用控制器类来接管这个工作，把Command 解放出来，让其集中精力处理自己的工作
 * 包括处理输入，调用应用程序逻辑和处理结果等
 */
?>