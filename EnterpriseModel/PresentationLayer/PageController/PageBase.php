<?php
/**
 * 前端控制器很好，但是并非所有的情况都适用；前端控制器要在前端做很多工作适合较大的系统
 *在一些需要实时返回结果的系统中不太合适；页面控制器模式是一个通用策略
 *和前端控制器一样，页面控制器也需要处理请求、领域逻辑、和表现之间的关系
 * 这些要素是任何一个企业应用项目都是必须的
 * 如果一个相对简单的项目，使用复杂的系统设计没什么必要，还会导致开发时间变长
 * 页面控制器更适合此类项目
 */

/**
 * 问题：
 * 视图是一个场所列表，请求是获取所有的场所列表，且这个请求也不会再用到其他视图
 * 那么最简单的处理方式就是将这个视图与控制器连接起来，放到同一个页面中
 *
 * 尽管在现实中采用页面控制器的项目可能会导致各种复杂的问题，但此模式本身很简单
 * 使用页面控制器的时候，控制逻辑与一个或多个视图关联
 * 这就意味着控制逻辑被放在视图里，尽管它可以被分离出来
 */
require_once ("Angular/Domain/Venue.php");
try{
    $venues = \Angular\Domain\Venue::findAll();
}catch(Exception $e){
    include("error.php");
    exit(0);
}
?>
<!--默认视图-->
<html>
<body><div>默认视图</div></body>
</html>
<!--上面代码分为2部分；视图部分处理现实工作，控制器负责处理请求调用应用逻辑
尽管视图控制器放在同一个页面但是它们的代码是分开的-->