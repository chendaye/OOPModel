<?php
    /**
     * 代码设计的概念
     * 设计是定义系统组成，并组织个组件的过程
     * 就是 类与对象的定义与配置
     * 类由方法过程，在定义类是必须决定由那些方法组成
     * 类之间的关系往往在类的结构中确定
     *
     * 面向对象编程和面向过程编程
     * 两者的区别并不在于是否使用了对象和类，核心区别在于如何分配职责
     * 过程是编程表现为：一系列命令和方法的联系调用。控制代码根据不同的条件执行不同的功能
     * 这种自上而下的方法导致重复代码和相互依赖的代码遍布整个项目
     * 面向对象：将职责从客户端代码移到专门的类中，将过程中的职责用方法来实现
     *
     * 过程代码忙于处理细节
     * 面向对象代码只需要一个接口
     *
     * 内聚：模块内部各成分之间关联的度量，修改一个模块不至于影响另外一个
     * 耦合：耦合越高越容易相互影响
     * 正交：将职责相关的组件组合在一起，与外部环境隔开，保持独立，正交主张重用组件，期望无需任何配置就能把组件插入另一个系统中
     * 有明确的和外部无关的输入和输出
     *
     * 选择类：一个类只有一个主要的职能，并且任务尽可能的独立；每个类只承担自己的任务
     *
     * 多态：在一个公共接口后面维护多个实现
     * 多态不能消灭条件语句，但是可以把条件语句集中到一个地方，一个态就是一个分支（在面向过程的代码中
     *
     * 封装：封装就是对客户端代码隐藏数据和功能
     * 实现封装最简单的方法是private 或者 producted
     * 多态是另一种封装，任何在接口和面的实现，对外部系统来说是可以忽略的，接口与背后的工作机制是分开的
     * 外界值关心接口的功能，不在乎其实现
     *
     * 封装是面向对象编程的关键，让系统中每部分都是独立的模块，像搭积木，每个模块都有足够的信息来完成自己的功能
     *
     * 围绕接口来思考，而不是具体的类
     * 一句话：为接口编程，而不是为实现而编程
     *
     * 代码设计不合理的几个现象：
     * 代码重复：重复代码意味着紧密耦合
     * 类知道的太多：全局变要谨慎使用，全局变量是类知道外部环境的额外信息，类会被绑定到外部环境中，让其很难被重用；尽量把类限制在自己的环境中
     * 类的功能太多：类的功能太多在创建子类的时候回产生问题
     * 条件语句：当代码中频繁出现特定的判断，应该考虑是不是把类拆分
     *
     * 继承：是众多类关系中的一种
     * 关联：一个类保存了属于另一个类的实例，就产生了关联
     * 聚合、组合：描述了一个类长期持有其他类的实例的情况。通过聚合和组合，被持有的类成了持有者的一部分
     *
     * 聚合和组合的区别：比如：持有者 是学校  被持有者 是学生
     * 聚合：学校拆除了  学生可以加入其他学校
     * 组合： 学校拆除了  学生也要被一起拆除
     */
?>